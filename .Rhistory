if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(allnames[as.integer(z)])
z }, 1)
g
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(allnames[as.integer(z)])
z }, 1)
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g[g < 0] <- NULL
g
g[g < 0] <- NA
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g
#g[g < 0] <- NA
g[g > 0] <- allnames[g[g>0]]
m[is.na(m)] <- g
m
result <- m
result
is.na(g)
g<0
g[g<0]
g[g>0]
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g[g < 0] <- NA
g
#g[g > 0] <- allnames[g[g>0]]
m[is.na(m)] <- g
m
# look for exact matches
#m <- match(color_names, allnames)
m <- allnames[color_names]
color_names <- cname
# look for exact matches
#m <- match(color_names, allnames)
m <- allnames[color_names]
# if items not found: do grep
#    require exactly one match
notfound <- color_names[is.na(m)]
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g
g[g < 0] <- NA
g
#g[g > 0] <- allnames[g[g>0]]
m[is.na(m)] <- g
m
result <- m
result
# for those not found singly, add input as names
names(result)[is.na(g)] <- color_names[is.na(g)]
result
g[g > 0] <- allnames[g[g>0]]
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g[g > 0] <- allnames[g[g>0]]
g
document()
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g[g > 0] <- allnames[g[g>0]]
g[g == '-1'] <- NA
g[g == '-2'] <- NA
m[is.na(m)] <- g
m
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g[g > 0] <- allnames[g[g>0]]
g
g==
c
g==
'-2'
g[g=='-2'] <- F
g[g=='-2'] <- NA
g
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g[g > 0] <- allnames[g[g>0]]
g[g == '-2'] <- NA
g
m[is.na(m)] <- g
m
m[is.na[m]]
# look for exact matches
#m <- match(color_names, allnames)
m <- allnames[color_names]
m[is.na(m)] <- g
m
allnames[g[g>0]]
allnames[138]
g
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g
allnames[g[g>0]]
g[g > 0] <- allnames[g[g>0]]
g
result <- m
# for those not found singly, add input as names
names(result)[is.na(g)] <- color_names[is.na(g)]
result
allnames
allnames[138]
names(allnames[g[g>0]])
allnames[g[g>0]]
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
allnames[g[g>0]]
names(allnames[g[g>0]])
names(g[g>0]) <- names(allnames[g[g>0]])
g
names(g[g>0])
names(g[g>0]) <- names(allnames[g[g>0]])
g
allnames
is(allnames)
vector(allnames)
as.vector(allnames)
allnames
# look for exact matches
#m <- match(color_names, allnames)
m <- allnames[color_names]
m
# if items not found: do grep
#    require exactly one match
notfound <- color_names[is.na(m)]
notfound
grep('blac', allnames)
grep('blac', allnames, ignore.case=T)
grep('blac', names(allnames), ignore.case=T)
g
g>0
g[g>0]
allnames[g[g>0]]
xx <- allnames[g[g>0]]
xx
g[g>0] <- allnames[g[g>0]]
g
g <- vapply(notfound, function(a) {
z <- grep(a, allnames, ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g[g>0]
g
g <- vapply(notfound, function(a) {
z <- grep(a, allnames, ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
# issue warning if some not found or some found multiply
if(any(g < 0)) {
if(any(g == -1)) warning('Some colors not found')
if(any(g == -2)) warning('Some colors have multiple matches')
}
g[g>0] <- allnames[g[g>0]]
g
g <- vapply(notfound, function(a) {
z <- grep(a, allnames, ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g[g>0] <- allnames[g[g>0]]
g
m
names(m)[is.na(m)]
names(m)[is.na(m)] <- color_names(is.na(g))
names(m)[is.na(m)] <- color_names[is.na(g)]
color_names[is.na(g)]
g
g[g == '-1'] <- NA
g[g == '-2'] <- NA
g
color_names[is.na(g)]
is.na(g)
color_names
color_names
document()
icolors.lookup()
icolors.lookup('aspen', 'blue', 'whit')
whit
icolors.lookup('aspen', 'blue', 'whiter')
icolors.lookup('aspen', 'blue', 'whiterock')
icolors.lookup('aspen', 'blue', 'whitero')
icolors.lookup('robin')
is.na(names(m))
is.na(names(m)) <- ele
is.na(names(m)) <- 'xx'
names(m)[is.na(names(m))]
names(m)[is.na(names(m))] <- xx
m
names(m)[is.na(names(m))] <- 'xx'
names(m)
m
document()
icolors.lookup()
icolors.lookup('red', 'white', 'blac')
icolors.lookup('red', 'whiter', 'blac')
icolors.lookup('red', 'whiter', 'blac')
document()
icolors.lookup('red', 'whiter', 'blac')
document()
icolors.lookup('red', 'whiter', 'blac')
document()
icolors.lookup('red', 'whiter', 'blac')
document()
icolors.lookup('red', 'whiter', 'blac')
document()
icolors.lookup('red', 'whiter', 'blac')
document()
icolors.lookup('red', 'whiter', 'blac')
allnames[g[!is.na(g)]]
g <- vapply(notfound, function(a) {
z <- grep(a, names(allnames), ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g
names(g)[is.na(names(g))] <- names(allnames[g[!is.na(g)]])
is.na(names(g))
is.na(names(m))
# look for exact matches
#m <- match(color_names, allnames)
m <- allnames[color_names]
is.na(names(m))
#    require exactly one match
notfound <- color_names[is.na(m)]
print(names(allnames[g[!is.na(g)]]))
print(names(allnames[g[g>0]]))
g
names(g[g>0])
names(g[g>0]) <- names(allnames[g[g]>0])
names(g[g>0]) <- names(allnames[g[g>0]])
g
names(allnames[g[g>0]])
name(g[g>0]) <- names(allnames[g[g>0]])
names(g[g>0]) <- names(allnames[g[g>0]])
?names
names(g[g>0]) <- names(allnames[g[g>0]])
g
names(g[g>0])
names(g[g>0]) <- 'red'
g
names(g[g>0]) <- 'red'
names(g[g>0])
allnames
as.vector(allnames)
allnames <- unlist(lapply(sets, icolors))
allvals <- as.vector(allnames)
# look for exact matches
#m <- match(color_names, allnames)
m <- allnames[color_names]
m
#    require exactly one match
notfound <- color_names[is.na(m)]
notfound
# look for exact matches
#m <- match(color_names, allnames)
m <- allcolors[color_names]
allcolors <- unlist(lapply(sets, icolors))
allnames <- names(allcolors)
allvals <- as.vector(allnames)
# look for exact matches
#m <- match(color_names, allnames)
m <- allcolors[color_names]
m
# if items not found: do grep
#    require exactly one match
notfound <- color_names[is.na(m)]
notfound
g <- vapply(notfound, function(a) {
z <- grep(a, allnames, ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g
# issue warning if some not found or some found multiply
if(any(g < 0)) {
if(any(g == -1)) warning('Some colors not found')
if(any(g == -2)) warning('Some colors have multiple matches')
}
names(allnames[g[g>0]])
allnames[g[g>0]]
g[g>0] <- allvals[g[g>0]]
g
g <- vapply(notfound, function(a) {
z <- grep(a, allnames, ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
g
g[g>0]
allvals
allvals <- as.vector(allcolors)
g[g>0] <- allvals[g[g>0]]
g
allnames[g[g>0]]
m
g
names(g[g>0])
g <- vapply(notfound, function(a) {
z <- grep(a, allnames, ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
names(g[g>0])
g[g>0]
names(g[g>0]) <- allnames(g[g>0])
names(g[g>0]) <- allnames[g[g>0]]
g
allnames[g[g>0]]
g[g>0] <- allvals[g[g>0]]
g[g == '-1'] <- NA
g[g == '-2'] <- NA
m[is.na(m)] <- g
m
is.na(m)
names(is.na(result))
names(result[is.na(result)])
g
# for those not found singly, add input as names
names(result)[is.na(result)] <- color_names[is.na(g)]
is.na(g)
# for those not found singly, add input as names
names(result[is.na(result)]) <- color_names[is.na(g)]
names(result[is.na(result)])
is.na(result)
is.na(g)
names(is.na(g))
result
m
result <- m
# for those not found singly, add input as names
names(result[is.na(result)]) <- names[is.na(g)]
# for those not found singly, add input as names
names(result[is.na(result)]) <- names(is.na(g))
names(is.na(g))
g
is.na(g)
names(g[is.na(g)])
# for those not found singly, add input as names
names(result[is.na(result)]) <- names(g[is.na(g)])
result
names(result) <- 'red'
result
is.na(result)
names(result[is.na(result)])
names(result[is.na(result)]) <- a
names(result[is.na(result)]) <- 'a'
result
result <- m
m
# look for exact matches
#m <- match(color_names, allnames)
m <- allcolors[color_names]
g <- vapply(notfound, function(a) {
z <- grep(a, allnames, ignore.case=TRUE)
if(length(z) < 1) return(-1) # not found
if(length(z) > 1) return(-2) # found multiply
if(length(z) == 1) return(as.integer(z))
z }, 1)
plot(volcano)
matrix(volcano)
plot(matrix(volcano))
library(rgl)
#
# volcano is a matrix that stores z values. Make this
# fact more explicit:
#
z <- volcano
#
# Two vectors that contain the «meters» from the zero point.
# A cell in the grid is 10x10 meters, so we need to multiply
# the vectors by 10:
#
x <- 10 * (1:nrow(z)) # Should that not be ncol?
y <- 10 * (1:ncol(z)) # Should that not be nrow?
z_min = min(z)
z_diff = max(z) - z_min + 1
height_to_color <- terrain.colors(z_diff)
colors <- height_to_color[ z - z_min + 1 ];
open3d() # rgl.open()
# rgl.bg(color='white');
par3d(windowRect=c(34, 57, 727, 707))
surface3d(x, y, z, color=colors); # rgl.surface
view3d(
userMatrix = matrix(
c(
0.972062767 , -0.1212740 , -0.2009648 , 0 ,
0.234625295 ,  0.4775052 ,  0.8467230 , 0 ,
-0.006723508 , -0.8702192 ,  0.4926187 , 0 ,
0.000000000 ,  0.0000000 ,  0.0000000 , 1
),
nrow  = 4,
byrow = TRUE
)
)
# rgl.bringtotop()
library(rgl)
#
# volcano is a matrix that stores z values. Make this
# fact more explicit:
#
z <- volcano
x <- 10 * (1:nrow(z)) # Should that not be ncol?
y <- 10 * (1:ncol(z)) # Should that not be nrow?
z_min = min(z)
z_diff = max(z) - z_min + 1
library(plot3D)
x <- 10 * (1:nrow(z)) # Should that not be ncol?
y <- 10 * (1:ncol(z)) # Should that not be nrow?
z_min = min(z)
z_diff = max(z) - z_min + 1
height_to_color <- terrain.colors(z_diff)
colors <- height_to_color[ z - z_min + 1 ];
surface3d(x,y,z)
plot3D::surf3D(x,y,z,colvar=z, col=icolors('gothic'))
x
x <- matrix(x)
x
y <- matrix(y)
plot3D::surf3D(x,y,z,colvar=z, col=icolors('gothic'))
plot3D::contour3D(x,y,z,colvar=z, col=icolors('gothic'))
x <- 10 * (1:nrow(z)) # Should that not be ncol?
y <- 10 * (1:ncol(z)) # Should that not be nrow?
plot3D::contour3D(x,y,z,colvar=z, col=icolors('gothic'))
library(plotly)
open3d() # rgl.open()
plot3D::contour3D(x,y,z,colvar=z, col=icolors('gothic'))
plot3D::surf3D(x,y,z,colvar=z, col=icolors('gothic'))
x <- matrix(x)
plot3D::surf3D(x,y,z,colvar=z, col=icolors('gothic'))
y <- matrix(y)
x
dim(x)
dim(y)
plot3D::surf3D(x,y,z,colvar=z, col=icolors('gothic'))
x <- matrix(x)[1:61]
y <- matrix(y)
plot3D::surf3D(x,y,z,colvar=z, col=icolors('gothic'))
x <- matrix(x[1:61])
y <- matrix(y)
plot3D::surf3D(x,y,z,colvar=z, col=icolors('gothic'))
x
z
#
# volcano is a matrix that stores z values. Make this
# fact more explicit:
#
z <- matrix(volcano[1:61])
plot3D::surf3D(x,y,z,colvar=z, col=icolors('gothic'))
